#!/usr/bin/env python
import pathlib
import glob
import sys
import os

from platform_methods import run_in_subprocess
from compat import open_utf8
import editor_builders

# Replacement code
from generators import Generator

Import('env')

env.editor_sources = []

generator = Generator(env)

def make_fonts ():
    path = env.Dir('.').abspath
    # Fonts
    font_dir = pathlib.Path(path, '../thirdparty/fonts').resolve()
    font_list = list(map(os.fsdecode, font_dir.glob('*.ttf')))
    font_list.extend(map(os.fsdecode, font_dir.glob('*.otf')))
    # XXX: This sort is technically unnecessary :/
    font_list.sort()
    return generator.fonts(
        'builtin_fonts.gen.h',
        'scripts/templates/editor/builtin_fonts.h.in',
        font_list)

def make_api_documentation ():
    # API documentation
    docs = []
    doc_dirs = ["doc/classes"]

    for p in env.doc_class_path.values():
        if p not in doc_dirs:
            doc_dirs.append(p)

    for d in doc_dirs:
        try:
            for f in os.listdir(os.path.join(env.Dir('#').abspath, d)):
                docs.append("#" + os.path.join(d, f))
        except OSError:
            pass


    docs = sorted(docs)
    gensource = generator.doc_header(
        'doc_data_compressed.gen.h',
        'scripts/templates/editor/doc_data_compressed.h.in',
        docs)
    generator.doc_data_class_path(os.path.join(env.Dir('#').abspath, "editor/doc"))

if env['tools']:
    # Register exporters
    reg_exporters_inc = '#include "register_exporters.h"\n'
    reg_exporters = 'void register_exporters() {\n'
    for e in env.platform_exporters:
        env.editor_sources.append("#platform/" + e + "/export/export.cpp")
        reg_exporters += '\tregister_' + e + '_exporter();\n'
        reg_exporters_inc += '#include "platform/' + e + '/export/export.h"\n'
    reg_exporters += '}\n'

    # NOTE: It is safe to generate this file here, since this is still executed
    # serially
    with open_utf8("register_exporters.gen.cpp", "w") as f:
        f.write(reg_exporters_inc)
        f.write(reg_exporters)

    make_api_documentation()

    path = env.Dir('.').abspath

    # Fonts
    gensource = make_fonts()

    # Translations
    tlist = glob.glob(path + "/translations/*.po")
    env.Depends('#editor/translations.gen.h', tlist)
    env.CommandNoCache('#editor/translations.gen.h', tlist, run_in_subprocess(editor_builders.make_translations_header))

    env.add_source_files(env.editor_sources, "*.cpp")
    env_thirdparty = env.Clone()
    env_thirdparty.disable_warnings()
    env_thirdparty.add_source_files(env.editor_sources, ["#thirdparty/misc/clipper.cpp"])

    SConscript('collada/SCsub')
    SConscript('doc/SCsub')
    SConscript('fileserver/SCsub')
    SConscript('icons/SCsub')
    SConscript('import/SCsub')
    SConscript('plugins/SCsub')

    lib = env.add_library("editor", env.editor_sources)
    env.Prepend(LIBS=[lib])
