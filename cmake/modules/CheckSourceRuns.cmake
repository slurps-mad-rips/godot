include_guard(GLOBAL)

include(CMakePushCheckState)
include(CheckCXXSourceRuns)
include(CheckCSourceRuns)

function (check_source_runs code variable)
  set(option QUIET)
  set(single LANGUAGE)
  set(multi FLAGS DEFINITIONS INCLUDES LIBRARIES HEADERS)
  cmake_parse_arguments(ARG "${option}" "${single}" "${multi}" ${ARGN})

  cmake_push_check_state()
  set(CMAKE_REQUIRED_DEFINITIONS ${ARG_DEFINITIONS})
  set(CMAKE_REQUIRED_LIBRARIES ${ARG_LIBRARIES})
  set(CMAKE_REQUIRED_INCLUDES ${ARG_INCLUDES})
  set(CMAKE_REQUIRED_FLAGS ${ARG_FLAGS})
  set(CMAKE_REQUIRED_QUIET OFF)
  if (ARG_QUIET)
    set(CMAKE_REQUIRED_QUIET ON)
  endif()
  if (${ARG_LANGUAGE} STREQUAL "CXX")
    check_cxx_source_runs(${code} ${variable})
  elseif (${ARG_LANGUAGE STREQUAL "C")
    check_c_source_runs(${code} ${variable})
  endif ()
  cmake_pop_check_state()
  set(${variable} ${${variable}} PARENT_SCOPE)
endfunction()
