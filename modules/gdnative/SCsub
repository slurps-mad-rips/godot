#!/usr/bin/env python

Import('env')
Import('env_modules')

env_gdnative = env_modules.Clone()
env_gdnative.add_source_files(env.modules_sources, "gdnative.cpp")
env_gdnative.add_source_files(env.modules_sources, "register_types.cpp")
env_gdnative.add_source_files(env.modules_sources, "android/*.cpp")
env_gdnative.add_source_files(env.modules_sources, "gdnative/*.cpp")
env_gdnative.add_source_files(env.modules_sources, "nativescript/*.cpp")
env_gdnative.add_source_files(env.modules_sources, "gdnative_library_singleton_editor.cpp")
env_gdnative.add_source_files(env.modules_sources, "gdnative_library_editor_plugin.cpp")

env_gdnative.Append(CPPPATH=['#modules/gdnative/include/'])

Export('env_gdnative')

SConscript("net/SCsub")
SConscript("arvr/SCsub")
SConscript("pluginscript/SCsub")
SConscript("videodecoder/SCsub")


from platform_methods import run_in_subprocess
import gdnative_builders
import sys

<<<<<<< HEAD
_, gensource = env_gdnative.CommandNoCache(['include/gdnative_api_struct.gen.h', 'gdnative_api_struct.gen.cpp'],
                               'gdnative_api.json', run_in_subprocess(gdnative_builders.build_gdnative_api_struct))
env_gdnative.add_source_files(env.modules_sources, [gensource])
=======
def root(path): return env.GetBuildPath('#/{}'.format(path))

def jinjafy (output, input, template, directory):
    args = dict(
        executable=sys.executable,
        directory=root(directory),
        template=root(template),
        script=root('scripts/gdnative-generator.py'))
    command = '@"{executable}" {script} -i $SOURCE -o $TARGET -t $TEMPLATE -d {directory}'
    result = gdn_env.Command(output, input, command.format(**args), TEMPLATE=template)
    env.NoCache(result)
    env.Depends(output, env.Glob('{}/*.jinja'.format(root(directory))))
    env.Depends(output, root(template))
    return result

gensource = jinjafy(
    'include/gdnative_api_struct.gen.h',
    'gdnative_api.json',
    'scripts/templates/gdnative-api-struct.h.in',
    'scripts/templates')

gensource = jinjafy(
    'gdnative_api_struct.gen.cpp',
    'gdnative_api.json',
    'scripts/templates/gdnative-api-struct.cpp.in',
    'scripts/templates')

gdn_env.add_source_files(env.modules_sources, [gensource])
>>>>>>> Added pipenv as a dependency (see commit message)

env.use_ptrcall = True


if ARGUMENTS.get('gdnative_wrapper', False):
<<<<<<< HEAD
    gensource, = env_gdnative.CommandNoCache('gdnative_wrapper_code.gen.cpp', 'gdnative_api.json', run_in_subprocess(gdnative_builders.build_gdnative_wrapper_code))
=======
    gensource, = jinjafy(
        'gdnative_wrapper_code.gen.cpp',
        'gdnative_api.json',
        'scripts/templates/gdnative-wrapper-code.cpp.in',
        'scripts/templates')
>>>>>>> Added pipenv as a dependency (see commit message)

    gd_wrapper_env = env.Clone()
    gd_wrapper_env.Append(CPPPATH=['#modules/gdnative/include/'])

    if gd_wrapper_env['use_lto']:
        if not env.msvc:
            gd_wrapper_env.Append(CCFLAGS=['-fno-lto'])
            gd_wrapper_env.Append(LINKFLAGS=['-fno-lto'])
        else:
            gd_wrapper_env.Append(CCFLAGS=['/GL-'])
            gd_wrapper_env.Append(LINKFLAGS=['/LTCG:OFF'])

    if not env.msvc:
        gd_wrapper_env.Append(CCFLAGS=['-fPIC'])

    lib = gd_wrapper_env.add_library("#bin/gdnative_wrapper_code", [gensource])
